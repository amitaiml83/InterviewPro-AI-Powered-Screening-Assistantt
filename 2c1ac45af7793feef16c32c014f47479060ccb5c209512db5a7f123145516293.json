{
    "Q1": {
        "question": "1. Question 1: Python - Can you explain how you would implement a recursive function to find the factorial of a given number in Python? (This question tests the candidate's understanding of recursion and their ability to implement it in Python.)",
        "answer": "To implement a recursive function for finding the factorial of a number in Python, the key idea is to break down the problem into smaller sub-problems where the factorial of a number \n\ud835\udc5b\nn is the product of \n\ud835\udc5b\nn and the factorial of \n\ud835\udc5b\n\u2212\n1\nn\u22121. The base case for the recursion would be when \n\ud835\udc5b\n=\n0\nn=0 or \n\ud835\udc5b\n=\n1\nn=1, where the factorial is defined to be 1.\n\nFormula for Factorial:\n\ud835\udc5b\n!\n=\n\ud835\udc5b\n\u00d7\n(\n\ud835\udc5b\n\u2212\n1\n)\n!\nn!=n\u00d7(n\u22121)!\nBase Case: \n0\n!\n=\n1\n0!=1 and \n1\n!\n=\n1\n1!=1\nRecursive Approach:\nBase Case: If the input number is 0 or 1, return 1 because both \n0\n!\n=\n1\n0!=1 and \n1\n!\n=\n1\n1!=1.\nRecursive Case: If the number is greater than 1, return the number multiplied by the factorial of the number minus 1.",
        "score": 7.5
    },
    "Q2": {
        "question": "2. Question 2: Data Structures and Algorithms (DSA) - Given an unsorted array of integers, design an efficient algorithm to find the second largest number in the array. (This question tests the candidate's problem-solving skills and their understanding of DSA concepts, specifically arrays and finding the second largest number in an unsorted array.)",
        "answer": "def find_second_largest(arr):\n    if len(arr) < 2:\n        return None  # Not enough elements to find the second largest\n    \n    largest = second_largest = float('-inf')  # Initialize to negative infinity\n    \n    for num in arr:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num != largest:\n            second_largest = num\n    \n    if second_largest == float('-inf'):\n        return None  # In case there is no distinct second largest number\n    \n    return second_largest\n\n# Example usage:\narr = [5, 3, 9, 12, 7]\nresult = find_second_largest(arr)\nprint(f\"The second largest number is: {result}\")\n",
        "score": 9.0
    },
    "Q3": {
        "question": "3. Question 3: Python - Suppose you have a list of dictionaries, each representing a student with their name, age, and grade. Write a Python function to sort the list of dictionaries by name, age, and then grade in ascending order. (This question tests the candidate's ability to sort a list of dictionaries in Python and their understanding of sorting algorithms.)",
        "answer": "i do not know the answer\n",
        "score": 0.0
    },
    "Q4": {
        "question": "4. Bonus Question: Problem Solving - You are given a string 'abcdefghijklmnopqrstuvwxyz' and an integer 'n'. Your task is to write a function that returns the 'n'th character from the right end of the string. If 'n' is greater than the length of the string, return an empty string. (This question tests the candidate's problem-solving skills and their ability to write concise, efficient code.)",
        "answer": "def nth_from_right(s, n):\n    if n > len(s):  # If 'n' is greater than the length of the string\n        return \"\"\n    return s[-n]  # Return the 'n-th' character from the right\n\n# Example usage:\ns = 'abcdefghijklmnopqrstuvwxyz'\nn = 5\nresult = nth_from_right(s, n)\nprint(f\"The {n}-th character from the right is: {result}\")\n",
        "score": 9.0
    },
    "average_score": 6.375
}